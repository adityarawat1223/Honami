{"version":3,"file":"Secretbox.js","sourceRoot":"","sources":["../../src/util/Secretbox.ts"],"names":[],"mappings":";;;AAAA,MAAM,IAAI,GAAG;IACZ,MAAM,EAAE,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;QACzB,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,0BAA0B;QAC3C,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,qBAAqB;QACvC,MAAM,EAAE,CAAC,CAAM,EAAE,MAAe,EAAE,EAAE;YACnC,IAAI,CAAC,MAAM;gBAAE,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACnC,OAAO,MAAM,CAAC;QACf,CAAC;KACD,CAAC;IACF,oBAAoB,EAAE,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;QACvC,IAAI,EAAE,MAAM,CAAC,0BAA0B;QACvC,KAAK,EAAE,MAAM,CAAC,qBAAqB;QACnC,MAAM,EAAE,CAAC,CAAM,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;KAC7C,CAAC;IACF,SAAS,EAAE,CAAC,SAAc,EAAE,EAAE,CAAC,CAAC;QAC/B,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,IAAI;QAC9B,KAAK,EAAE,SAAS,CAAC,SAAS;QAC1B,MAAM,EAAE,CAAC,CAAM,EAAE,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;KAC5C,CAAC;CACF,CAAC;AAEF,MAAM,OAAO,GAAqB,EAAE,CAAC;AAc5B,0BAAO;AAZhB,KAAK,CAAC,KAAK,IAAI,EAAE;IAChB,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QACxC,IAAI;YACH,2BAA2B;YAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,OAAO,KAAK,oBAAoB,IAAI,GAAG,CAAC,KAAK;gBAAE,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,uCAAuC;YAC3G,MAAM,CAAC,MAAM,CAAC,OAAO,EAAG,IAAY,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACpD,MAAM;SACN;QAAC,MAAM,GAAE,CAAC,+BAA+B;KAC1C;AACF,CAAC,CAAC,EAAE,CAAC","sourcesContent":["const libs = {\n\tsodium: (sodium: any) => ({\n\t\topen: sodium.api.crypto_secretbox_open_easy,\n\t\tclose: sodium.api.crypto_secretbox_easy,\n\t\trandom: (n: any, buffer?: Buffer) => {\n\t\t\tif (!buffer) buffer = Buffer.allocUnsafe(n);\n\t\t\tsodium.api.randombytes_buf(buffer);\n\t\t\treturn buffer;\n\t\t},\n\t}),\n\t'libsodium-wrappers': (sodium: any) => ({\n\t\topen: sodium.crypto_secretbox_open_easy,\n\t\tclose: sodium.crypto_secretbox_easy,\n\t\trandom: (n: any) => sodium.randombytes_buf(n),\n\t}),\n\ttweetnacl: (tweetnacl: any) => ({\n\t\topen: tweetnacl.secretbox.open,\n\t\tclose: tweetnacl.secretbox,\n\t\trandom: (n: any) => tweetnacl.randomBytes(n),\n\t}),\n};\n\nconst methods: Record<any, any> = {};\n\nvoid (async () => {\n\tfor (const libName of Object.keys(libs)) {\n\t\ttry {\n\t\t\t// eslint-disable-next-line\n\t\t\tconst lib = require(libName);\n\t\t\tif (libName === 'libsodium-wrappers' && lib.ready) await lib.ready; // eslint-disable-line no-await-in-loop\n\t\t\tObject.assign(methods, (libs as any)[libName](lib));\n\t\t\tbreak;\n\t\t} catch {} // eslint-disable-line no-empty\n\t}\n})();\n\nexport { methods };\n"]}